# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:


services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/'
    exclude:
      - '../src/DependencyInjection/'
      - '../src/Entity/'
      - '../src/Kernel.php'
      - '../src/Tests/'
      - '../src/IO/'


  App\System\Dispatcher\Listener\ExceptionListener:
    tags:
      - { name: kernel.event_listener, event: kernel.exception }

  App\System\Dispatcher\Listener\AuthorizationListener:
    public: true
    arguments:
      $serviceAuthHeader: '%env(SERVICE_HEADER)%'
      $serviceAuthToken: '%env(SERVICE_TOKEN)%'

      # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  App\IO\Http\Controller\:
    resource: '../src/IO/Http/Controller/'
    tags: ['controller.service_arguments']

  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones

  App\IO\JsonRpc\Handlers\TemperatureForDate\Handler:
    public: false
    tags:
      - { method: "weather.getByDate", name: 'json_rpc_http_server.jsonrpc_method' }
  App\IO\JsonRpc\Handlers\TemperatureHistory\Handler:
    public: false
    tags:
      - { method: "weather.getHistory", name: 'json_rpc_http_server.jsonrpc_method' }